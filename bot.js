const TelegramBot = require("node-telegram-bot-api")
const fs = require("fs")
const cron = require("node-cron")
const http = require("http")

const PORT = 3009

const token = process.env.TELEGRAM_BOT_TOKEN
const bot = new TelegramBot(token, { polling: true })

const DB_FILE = "ratings.json"
let db = {
  users: {},
  weeklyActivity: {},
  weeklyRatingChanges: {},
  reactions: {}
}

if (fs.existsSync(DB_FILE)) {
  console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ ${DB_FILE}`)
  db = JSON.parse(fs.readFileSync(DB_FILE))
  
  if (!db.reactions) {
    db.reactions = {}
  }
}

function saveDB() {
  console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
  fs.writeFileSync(DB_FILE, JSON.stringify(db, null, 2))
}

function initUser(userId, username) {
  if (username === "nononotoxic_bot") {
    console.log(`–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º –∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞`)
    return false
  }

  if (!db.users[userId]) {
    console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username || `User${userId}`}`)
    db.users[userId] = {
      id: userId,
      username: username || `User${userId}`,
      rating: 1000,
    }
  }

  if (!db.weeklyActivity[userId]) {
    db.weeklyActivity[userId] = false
  }

  if (!db.weeklyRatingChanges[userId]) {
    db.weeklyRatingChanges[userId] = 0
  }
  
  return true
}

function updateRating(userId, change) {
  const oldRating = db.users[userId].rating
  db.users[userId].rating += change
  db.weeklyRatingChanges[userId] += change

  if (db.users[userId].rating < 0) {
    db.users[userId].rating = 0
  }

  console.log(`–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${db.users[userId].username} –∏–∑–º–µ–Ω–∏–ª—Å—è: ${oldRating} -> ${db.users[userId].rating} (${change > 0 ? '+' : ''}${change})`)
  saveDB()
}

bot.on("message", (msg) => {
  const userId = msg.from.id
  const username = msg.from.username || msg.from.first_name
  const chatId = msg.chat.id
  const messageText = msg.text || ""

  if (!initUser(userId, username)) {
    return
  }

  db.weeklyActivity[userId] = true
  
  if (msg.reply_to_message) {
    const originalMessageId = msg.reply_to_message.message_id
    const originalMessageAuthorId = msg.reply_to_message.from.id
    const originalMessageAuthorName = msg.reply_to_message.from.username || msg.reply_to_message.from.first_name
    
    if (userId === originalMessageAuthorId) {
      console.log(`–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${username} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`)
      saveDB()
      return
    }
    
    if (originalMessageAuthorName === "nononotoxic_bot") {
      console.log(`–ü—Ä–æ–ø—É—â–µ–Ω–æ: –æ—Ü–µ–Ω–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ ${originalMessageAuthorName}`)
      return
    }
    
    if (!initUser(originalMessageAuthorId, originalMessageAuthorName)) {
      return
    }
    
    const reactionKey = `${chatId}_${originalMessageId}`
    
    if (!db.reactions[reactionKey]) {
      db.reactions[reactionKey] = {}
    }
    
    if (db.reactions[reactionKey][userId]) {
      const prevReaction = db.reactions[reactionKey][userId]
      console.log(`–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${username} —É–∂–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ${originalMessageAuthorName} (${prevReaction})`)
      return
    }
    
    if (messageText.trim().toLowerCase() === "w") {
      updateRating(originalMessageAuthorId, 25)
      console.log(`${username} –æ—Ü–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ${originalMessageAuthorName} –∫–∞–∫ W. +25 –æ—á–∫–æ–≤!`)
      
      db.reactions[reactionKey][userId] = "w"
    } else if (messageText.trim().toLowerCase() === "f") {
      updateRating(originalMessageAuthorId, -25)
      console.log(`${username} –æ—Ü–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ${originalMessageAuthorName} –∫–∞–∫ F. -25 –æ—á–∫–æ–≤!`)
      
      db.reactions[reactionKey][userId] = "f"
    }
  }
  
  console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username} –≤ —á–∞—Ç–µ ${chatId}`)
  saveDB()
})

function generateRatingsReport() {
  console.log("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö")
  
  const sortedUsers = Object.values(db.users)
    .filter(user => user.username !== "nononotoxic_bot")
    .sort((a, b) => b.rating - a.rating)

  let report = "<b>üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ üìä</b>\n\n"
  report += "<b>–¢–µ–∫—É—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏:</b>\n"

  sortedUsers.forEach((user, index) => {
    report += `${index + 1}. ${user.username}: ${user.rating} –æ—á–∫–æ–≤\n`
  })

  report += "\n<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n"

  const sortedByChanges = Object.entries(db.weeklyRatingChanges)
    .filter(([userId]) => {
      const username = db.users[userId]?.username;
      return username && username !== "nononotoxic_bot";
    })
    .map(([userId, change]) => ({
      userId,
      change,
      username: db.users[userId]?.username || `User${userId}`,
    }))
    .sort((a, b) => b.change - a.change)

  sortedByChanges.forEach((item, index) => {
    const changeSymbol = item.change > 0 ? "üìà" : item.change < 0 ? "üìâ" : "‚ûñ"
    report += `${index + 1}. ${item.username}: ${changeSymbol} ${item.change} –æ—á–∫–æ–≤\n`
  })

  return report;
}

function applyInactivityPenalty() {
  console.log("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
  
  Object.keys(db.weeklyActivity).forEach((userId) => {
    if (!db.weeklyActivity[userId]) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${db.users[userId]?.username} –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ. -125 –æ—á–∫–æ–≤!`)
      updateRating(userId, -125)
    }

    db.weeklyActivity[userId] = false
  })
}

function resetWeeklyChanges() {
  console.log("–°–±—Ä–æ—Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥–∞")
  
  Object.keys(db.weeklyRatingChanges).forEach((userId) => {
    db.weeklyRatingChanges[userId] = 0
  })
  saveDB()
}

function cleanupOldReactions() {
  console.log("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∞–∫—Ü–∏—è—Ö")
  
  db.reactions = {}
  saveDB()
}

cron.schedule("0 17 * * 6", () => {
  console.log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")

  applyInactivityPenalty()

  const report = generateRatingsReport()

  const activeChatIds = getActiveChatIds()

  console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ ${activeChatIds.length} —á–∞—Ç–æ–≤`)
  activeChatIds.forEach((chatId) => {
    bot.sendMessage(chatId, report, { parse_mode: "HTML" })
  })

  resetWeeklyChanges()
  
  cleanupOldReactions()
})

function getActiveChatIds() {
  console.log("–ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
  return []
}

bot.onText(/\/ratings/, (msg) => {
  const chatId = msg.chat.id
  const userId = msg.from.id
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from.username || userId} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏`)
  
  const sortedUsers = Object.values(db.users)
    .filter(user => user.username !== "nononotoxic_bot")
    .sort((a, b) => b.rating - a.rating)
  
  let report = `<b>üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ üìä</b>\n\n`
  report += `<b>–¢–µ–∫—É—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏:</b>\n`
  
  sortedUsers.forEach((user, index) => {
    report += `${index + 1}. ${user.username}: ${user.rating} –æ—á–∫–æ–≤\n`
  })
  
  report += `\n<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n`
  
  const sortedByChanges = Object.entries(db.weeklyRatingChanges)
    .filter(([userId]) => {
      const username = db.users[userId]?.username;
      return username && username !== "nononotoxic_bot";
    })
    .map(([userId, change]) => ({
      userId,
      change,
      username: db.users[userId]?.username || `User${userId}`,
    }))
    .sort((a, b) => b.change - a.change)
  
  sortedByChanges.forEach((item, index) => {
    const changeSymbol = item.change > 0 ? "üìà" : item.change < 0 ? "üìâ" : "‚ûñ"
    report += `${index + 1}. ${item.username}: ${changeSymbol} ${item.change} –æ—á–∫–æ–≤\n`
  })
  
  bot.sendMessage(chatId, report, { parse_mode: "HTML" })
})

bot.onText(/\/top(?:\s+(\d+))?/, (msg, match) => {
  const chatId = msg.chat.id
  const userId = msg.from.id
  const limit = parseInt(match[1]) || 10
  
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from.username || userId} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ–ø-${limit} —Ä–µ–π—Ç–∏–Ω–≥–æ–≤`)
  
  const sortedUsers = Object.values(db.users)
    .filter(user => user.username !== "nononotoxic_bot")
    .sort((a, b) => b.rating - a.rating)
    .slice(0, limit)

  let report = `<b>üìä –¢–æ–ø-${limit} —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ üìä</b>\n\n`
  
  sortedUsers.forEach((user, index) => {
    report += `${index + 1}. ${user.username}: ${user.rating} –æ—á–∫–æ–≤\n`
  })

  bot.sendMessage(chatId, report, { parse_mode: "HTML" })
})

bot.onText(/\/myrating/, (msg) => {
  const chatId = msg.chat.id
  const userId = msg.from.id
  const username = msg.from.username || msg.from.first_name
  
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥`)
  
  initUser(userId, username)
  
  const sortedUsers = Object.values(db.users).sort((a, b) => b.rating - a.rating)
  const position = sortedUsers.findIndex(user => user.id === userId) + 1
  
  let report = `<b>üìä –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ üìä</b>\n\n`
  report += `${username}, –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>${db.users[userId].rating}</b> –æ—á–∫–æ–≤\n`
  report += `–í—ã –Ω–∞ <b>${position}</b> –º–µ—Å—Ç–µ –∏–∑ ${sortedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`
  
  const weeklyChange = db.weeklyRatingChanges[userId]
  const changeSymbol = weeklyChange > 0 ? "üìà" : weeklyChange < 0 ? "üìâ" : "‚ûñ"
  
  report += `\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é: ${changeSymbol} ${weeklyChange} –æ—á–∫–æ–≤`
  
  bot.sendMessage(chatId, report, { parse_mode: "HTML" })
})

bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id
  const userId = msg.from.id
  
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from.username || userId} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å`)
  
  const helpText = `
<b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤</b>

–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:
- –û—Ç–≤–µ—Ç "w": +25 –æ—á–∫–æ–≤ –∞–≤—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
- –û—Ç–≤–µ—Ç "f": -25 –æ—á–∫–æ–≤ –∞–≤—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è

<b>–ü—Ä–∞–≤–∏–ª–∞:</b>
- –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Å 1000 –æ—á–∫–æ–≤
- –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è
- –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ—Ä—è—é—Ç 125 –æ—á–∫–æ–≤ –≤ –Ω–µ–¥–µ–ª—é
- –†–µ–π—Ç–∏–Ω–≥ –Ω–µ –º–æ–∂–µ—Ç –æ–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–∏–∂–µ 0

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/ratings - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤—Å–µ—Ö
/top [N] - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
/myrating - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ª–∏—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é

–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∫–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É –≤ 17:00.
`
  bot.sendMessage(chatId, helpText, { parse_mode: "HTML" })
})

const server = http.createServer((req, res) => {
  res.statusCode = 200
  res.setHeader('Content-Type', 'text/plain')
  res.end('–ë–æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–µ–Ω')
})

server.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
})

console.log("–ë–æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω!")
